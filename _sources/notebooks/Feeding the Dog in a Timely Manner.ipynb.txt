{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "592d34fb-a918-4b94-a5e4-4969d814e9f9",
   "metadata": {},
   "source": [
    "## Feeding the Dog in a Timely Manner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "477fca63-fc55-40e3-83ff-f59748a3e18a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Compliance DYNAMIC TOLERANCE Policy\n",
    "#\n",
    "# Main function, establishes a connection to DataTrails using an App Registration then uses that\n",
    "# to create a Compliance DYNAMIC TOLERANCE Policy.\n",
    "#\n",
    "# Note: The purpose of DataTrails Jupyter Notebooks is to provide simplified examples that one can easily execute and digest.\n",
    "# The DataTrails Python SDK is authored to work cleanly with more advanced coding techniques.\n",
    "#\n",
    "# DataTrails Python SDK: https://github.com/datatrails/datatrails-python\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a808cbc9-ff34-4f02-be10-4faaf0d1f792",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "\n",
    "from json import dumps as json_dumps\n",
    "from os import getenv\n",
    "from warnings import filterwarnings\n",
    "\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "from archivist.archivist import Archivist\n",
    "from archivist.compliance_policy_requests import (\n",
    "    CompliancePolicyDynamicTolerance,\n",
    ")\n",
    "from archivist.proof_mechanism import ProofMechanism\n",
    "from archivist.logger import set_logger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "926f3e34-6482-4b83-8a56-9a48d5244a24",
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext dotenv\n",
    "%dotenv -o notebooks.env"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6578da4b-bf37-40b4-8758-765c51b5ae30",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DATATRAILS_URL, DATATRAILS_APPREG_CLIENT, DATATRAILS_APPREG_SECRET are environment variables that represent connection parameters.\n",
    "#\n",
    "# DATATRAILS_URL = represents the url to the DataTrails application\n",
    "# DATATRAILS_APPREG_CLIENT = represents the client ID from an Application Registration\n",
    "# DATATRAILS_APPREG_SECRET = represents the client secret from an Application Registration\n",
    "DATATRAILS_URL = getenv(\"DATATRAILS_URL\")\n",
    "DATATRAILS_APPREG_CLIENT = getenv(\"DATATRAILS_APPREG_CLIENT\")\n",
    "DATATRAILS_APPREG_SECRET = getenv(\"DATATRAILS_APPREG_SECRET\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a1aa21c9-c6b1-4fe5-9abf-2c13814b0ede",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connecting to DATATRAILS\n",
      "DATATRAILS_URL https://app.datatrails.ai\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Main function of DYNAMIC TOLERANCE policy creation.\n",
    "\n",
    "* Connect to DataTrails with client ID and client secret\n",
    "* Creates a Compliance DYNAMIC TOLERANCE Policy\n",
    "\"\"\"\n",
    "\n",
    "# Optional call to set the logger level.  The argument can be either\n",
    "# \"INFO\" or \"DEBUG\".  For more sophisticated logging control see our\n",
    "# documentation.\n",
    "set_logger(\"INFO\")\n",
    "\n",
    "# Initialize connection to DATATRAILS\n",
    "print(\"Connecting to DATATRAILS\")\n",
    "print(\"DATATRAILS_URL\", DATATRAILS_URL)\n",
    "arch = Archivist(\n",
    "    DATATRAILS_URL, (DATATRAILS_APPREG_CLIENT, DATATRAILS_APPREG_SECRET), max_time=300\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "900f0ae5-86dd-48e3-a2cf-9c36fd9ae577",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_compliance_policy(arch):\n",
    "    \"\"\"\n",
    "    Creates a DYNAMIC TOLERANCE compliance policy for Fed/Feed Events. If time between\n",
    "    Feed/Fed Events is .5 greater than the average time between similar Events in\n",
    "    the past week, then Golden Retriever Asset is out of compliance.\n",
    "    \"\"\"\n",
    "    dynamic_tolerance_policy = arch.compliance_policies.create(\n",
    "        CompliancePolicyDynamicTolerance(\n",
    "            description=\"Average time between Fed/Feed Events\",\n",
    "            display_name=\"Outlying Feed Events\",\n",
    "            asset_filter=[\n",
    "                [\"attributes.arc_display_type=Golden Retriever\"],\n",
    "            ],\n",
    "            event_display_type=\"Feed\",\n",
    "            closing_event_display_type=\"Fed\",\n",
    "            dynamic_window=604800,\n",
    "            dynamic_variability=0.5,\n",
    "        )\n",
    "    )\n",
    "    print(\"DYNAMIC_TOLERANCE_POLICY:\", json_dumps(dynamic_tolerance_policy, indent=4))\n",
    "    return dynamic_tolerance_policy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0ba4e484-d93e-4a71-9672-ff3d6c0adaea",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Refresh token\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DYNAMIC_TOLERANCE_POLICY: {\n",
      "    \"identity\": \"compliance_policies/d02099fa-adb5-43b3-b2d6-60bf54ad247a\",\n",
      "    \"compliance_type\": \"COMPLIANCE_DYNAMIC_TOLERANCE\",\n",
      "    \"description\": \"Average time between Fed/Feed Events\",\n",
      "    \"display_name\": \"Outlying Feed Events\",\n",
      "    \"asset_filter\": [\n",
      "        {\n",
      "            \"or\": [\n",
      "                \"attributes.arc_display_type=Golden Retriever\"\n",
      "            ]\n",
      "        }\n",
      "    ],\n",
      "    \"event_display_type\": \"Feed\",\n",
      "    \"closing_event_display_type\": \"Fed\",\n",
      "    \"time_period_seconds\": \"0\",\n",
      "    \"dynamic_window\": \"604800\",\n",
      "    \"dynamic_variability\": 0.5,\n",
      "    \"richness_assertions\": []\n",
      "}\n",
      "Compliance_Policy {\n",
      "    \"identity\": \"compliance_policies/d02099fa-adb5-43b3-b2d6-60bf54ad247a\",\n",
      "    \"compliance_type\": \"COMPLIANCE_DYNAMIC_TOLERANCE\",\n",
      "    \"description\": \"Average time between Fed/Feed Events\",\n",
      "    \"display_name\": \"Outlying Feed Events\",\n",
      "    \"asset_filter\": [\n",
      "        {\n",
      "            \"or\": [\n",
      "                \"attributes.arc_display_type=Golden Retriever\"\n",
      "            ]\n",
      "        }\n",
      "    ],\n",
      "    \"event_display_type\": \"Feed\",\n",
      "    \"closing_event_display_type\": \"Fed\",\n",
      "    \"time_period_seconds\": \"0\",\n",
      "    \"dynamic_window\": \"604800\",\n",
      "    \"dynamic_variability\": 0.5,\n",
      "    \"richness_assertions\": []\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Creates DYNAMIC TOLERANCE compliance policy and prints result\n",
    "compliance_policy = create_compliance_policy(arch)\n",
    "print(\"Compliance_Policy\", json_dumps(compliance_policy, indent=4))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "c11202d2846b22eec7deaf37ea813ba92a5f75b5344a4d16688175855af7948e"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
