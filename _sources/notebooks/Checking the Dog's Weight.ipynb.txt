{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "id": "55d0e5a9-040a-4441-af39-438d66f14f65",
   "metadata": {},
   "source": [
    "## Checking the Dog's Weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5c6fb7af-c701-42e1-b3b3-7e1bd845ffcf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create Compliance RICHNESS Policy\n",
    "#\n",
    "# Main function, establishes a connection to DataTrails using an App Registration then uses that\n",
    "# to create a Compliance RICHNESS Policy.\n",
    "#\n",
    "# Note: The purpose of DataTrails Jupyter Notebooks is to provide simplified examples that one can easily execute and digest.\n",
    "# The DataTrails Python SDK is authored to work cleanly with more advanced coding techniques.\n",
    "#\n",
    "# DataTrails Python SDK: https://github.com/datatrails/datatrails-python\n",
    "#"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "123b4c7e-ecb2-439f-b8d7-b94036936efd",
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "import string\n",
    "\n",
    "from json import dumps as json_dumps\n",
    "from os import getenv\n",
    "from warnings import filterwarnings\n",
    "\n",
    "from dotenv import load_dotenv\n",
    "\n",
    "from archivist.archivist import Archivist\n",
    "from archivist.compliance_policy_requests import (\n",
    "    CompliancePolicyRichness,\n",
    ")\n",
    "from archivist.logger import set_logger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "da924db9-8182-4254-9b70-5f07d985961f",
   "metadata": {},
   "outputs": [],
   "source": [
    "%reload_ext dotenv\n",
    "%dotenv -o notebooks.env"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0109a24e-2ddf-4cb9-8347-91cdc0cf6631",
   "metadata": {},
   "outputs": [],
   "source": [
    "# DATATRAILS_URL, DATATRAILS_APPREG_CLIENT, DATATRAILS_APPREG_SECRET are environment variables that represent connection parameters.\n",
    "#\n",
    "# DATATRAILS_URL = represents the url to the DataTrails application\n",
    "# DATATRAILS_APPREG_CLIENT = represents the client ID from an Application Registration\n",
    "# DATATRAILS_APPREG_SECRET = represents the client secret from an Application Registration\n",
    "DATATRAILS_URL = getenv(\"DATATRAILS_URL\")\n",
    "DATATRAILS_APPREG_CLIENT = getenv(\"DATATRAILS_APPREG_CLIENT\")\n",
    "DATATRAILS_APPREG_SECRET = getenv(\"DATATRAILS_APPREG_SECRET\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1192eef6-6f8e-4bc0-9d52-889e0ef09ec3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Connecting to DATATRAILS\n",
      "DATATRAILS_URL https://app.datatrails.ai\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Main function of RICHNESS policy creation.\n",
    "\n",
    "* Connect to DataTrails with client ID and client secret\n",
    "* Creates a Compliance RICHNESS Policy\n",
    "\"\"\"\n",
    "\n",
    "# Optional call to set the logger level.  The argument can be either\n",
    "# \"INFO\" or \"DEBUG\".  For more sophisticated logging control see our\n",
    "# documentation.\n",
    "set_logger(\"INFO\")\n",
    "\n",
    "# Initialize connection to DATATRAILS\n",
    "print(\"Connecting to DATATRAILS\")\n",
    "print(\"DATATRAILS_URL\", DATATRAILS_URL)\n",
    "arch = Archivist(\n",
    "    DATATRAILS_URL, (DATATRAILS_APPREG_CLIENT, DATATRAILS_APPREG_SECRET), max_time=300\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "271f947d-b9aa-43db-97fc-dfe372a3b551",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_compliance_policy(arch):\n",
    "    \"\"\"\n",
    "    Creates a RICHNESS compliance policy for a dog's weight. If the dog's weight is\n",
    "    over 60lbs then Golden Retriever Asset is out of compliance.\n",
    "    \"\"\"\n",
    "    richness_policy = arch.compliance_policies.create(\n",
    "        CompliancePolicyRichness(\n",
    "            description=\"Dog's weight not over 60lbs\",\n",
    "            display_name=\"Dog's weight not over 60lbs\",\n",
    "            asset_filter=[\n",
    "                [\"attributes.arc_display_type=Golden Retriever\"],\n",
    "            ],\n",
    "            richness_assertions=[\n",
    "                [\"Weight<61\"],\n",
    "            ],\n",
    "        )\n",
    "    )\n",
    "    print(\"RICHNESS_POLICY:\", json_dumps(richness_policy, indent=4))\n",
    "    return richness_policy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "99eb566c-4006-4ed1-b427-1b7e5657a7f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Refresh token\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RICHNESS_POLICY: {\n",
      "    \"identity\": \"compliance_policies/c459c04d-4664-4ce1-9855-b64ed03dbec1\",\n",
      "    \"compliance_type\": \"COMPLIANCE_RICHNESS\",\n",
      "    \"description\": \"Dog's weight not over 60lbs\",\n",
      "    \"display_name\": \"Dog's weight not over 60lbs\",\n",
      "    \"asset_filter\": [\n",
      "        {\n",
      "            \"or\": [\n",
      "                \"attributes.arc_display_type=Golden Retriever\"\n",
      "            ]\n",
      "        }\n",
      "    ],\n",
      "    \"event_display_type\": \"\",\n",
      "    \"closing_event_display_type\": \"\",\n",
      "    \"time_period_seconds\": \"0\",\n",
      "    \"dynamic_window\": \"0\",\n",
      "    \"dynamic_variability\": 0,\n",
      "    \"richness_assertions\": [\n",
      "        {\n",
      "            \"or\": [\n",
      "                \"Weight<61\"\n",
      "            ]\n",
      "        }\n",
      "    ]\n",
      "}\n",
      "Compliance_Policy {\n",
      "    \"identity\": \"compliance_policies/c459c04d-4664-4ce1-9855-b64ed03dbec1\",\n",
      "    \"compliance_type\": \"COMPLIANCE_RICHNESS\",\n",
      "    \"description\": \"Dog's weight not over 60lbs\",\n",
      "    \"display_name\": \"Dog's weight not over 60lbs\",\n",
      "    \"asset_filter\": [\n",
      "        {\n",
      "            \"or\": [\n",
      "                \"attributes.arc_display_type=Golden Retriever\"\n",
      "            ]\n",
      "        }\n",
      "    ],\n",
      "    \"event_display_type\": \"\",\n",
      "    \"closing_event_display_type\": \"\",\n",
      "    \"time_period_seconds\": \"0\",\n",
      "    \"dynamic_window\": \"0\",\n",
      "    \"dynamic_variability\": 0,\n",
      "    \"richness_assertions\": [\n",
      "        {\n",
      "            \"or\": [\n",
      "                \"Weight<61\"\n",
      "            ]\n",
      "        }\n",
      "    ]\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "# Creates RICHNESS compliance policy and prints result\n",
    "compliance_policy = create_compliance_policy(arch)\n",
    "print(\"Compliance_Policy\", json_dumps(compliance_policy, indent=4))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "vscode": {
   "interpreter": {
    "hash": "c11202d2846b22eec7deaf37ea813ba92a5f75b5344a4d16688175855af7948e"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
